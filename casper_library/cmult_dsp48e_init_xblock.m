function cmult_dsp48e_init_xblock(n_bits_a, bin_pt_a, n_bits_b, bin_pt_b, conjugated, full_precision, n_bits_c, bin_pt_c, quantization, overflow, cast_latency)

% Validate input fields.
% Initialization script
if (n_bits_a < 1),
	disp([gcb,': Input ''a'' bit width must be greater than 0.']);
	return
end

if (n_bits_b < 1),
	disp([gcb, ': Input ''b'' bit width must be greater than 0.']);
	return
end

if (n_bits_c < 1),
	disp([gcb, ': Output ''c'' bit width must be greater than 0.']);
	return
end

if (n_bits_a > 25),
	disp([gcb, ': Input ''a'' bit width cannot exceed 25.']);
	return
end

if (n_bits_b > 18),
	disp([gcb, ': Input ''b'' bit width cannot exceed 18.']);
	return
end

if (bin_pt_a < 0),
	disp([gcb, ': Input ''a'' binary point must be greater than 0.']);
	return
end

if (bin_pt_b < 0),
	disp([gcb, ': Input ''b'' binary point must be greater than 0.']);
	return
end

if (bin_pt_c < 0),
	disp([gcb, ': Output ''c'' binary point must be greater than 0.']);
	return
end

if (bin_pt_a > n_bits_a),
  disp([gcb, ': Input ''a'' binary point cannot exceed bit width.']);
  return
end

if (bin_pt_b > n_bits_b),
  disp([gcb, ': Input ''b'' binary point cannot exceed bit width.']);
  return
end

if (bin_pt_c > n_bits_c),
  disp([gcb, ': Output ''c'' binary point cannot exceed bit width.']);
  return
end

% Calculate bit widths and binary points.
bin_pt_reinterp = bin_pt_a + bin_pt_b;
if strcmp(full_precision, 'on'),
  n_bits_out = n_bits_a + n_bits_b + 1;
  bin_pt_out = bin_pt_a + bin_pt_b;
else,
  n_bits_out = n_bits_c;
  bin_pt_out = bin_pt_c;
end



%% inports
xlsub2_a_re = xInport('a_re');
xlsub2_a_im = xInport('a_im');
xlsub2_b_re = xInport('b_re');
xlsub2_b_im = xInport('b_im');

%% outports
xlsub2_c_re = xOutport('c_re');
xlsub2_c_im = xOutport('c_im');

%% diagram

                       

% block: DSP48CMULT/cmult_dsp48e/Convert
xlsub2_reinterp_a_im_out1 = xSignal;
xlsub2_Convert_out1 = xSignal;
xlsub2_Convert = xBlock(struct('source', 'Convert', 'name', 'Convert'), ...
                        struct('n_bits', 30, ...
                               'bin_pt', 0, ...
                               'pipeline', 'on'), ...
                        {xlsub2_reinterp_a_im_out1}, ...
                        {xlsub2_Convert_out1});

% block: DSP48CMULT/cmult_dsp48e/Convert1
xlsub2_Convert1_out1 = xSignal;
xlsub2_Convert1 = xBlock(struct('source', 'Convert', 'name', 'Convert1'), ...
                         struct('n_bits', 30, ...
                                'bin_pt', 0, ...
                                'pipeline', 'on'), ...
                         {xlsub2_reinterp_a_im_out1}, ...
                         {xlsub2_Convert1_out1});

% block: DSP48CMULT/cmult_dsp48e/Convert2
xlsub2_reinterp_a_re_out1 = xSignal;
xlsub2_Convert2_out1 = xSignal;
xlsub2_Convert2 = xBlock(struct('source', 'Convert', 'name', 'Convert2'), ...
                         struct('n_bits', 30, ...
                                'bin_pt', 0, ...
                                'pipeline', 'on'), ...
                         {xlsub2_reinterp_a_re_out1}, ...
                         {xlsub2_Convert2_out1});

% block: DSP48CMULT/cmult_dsp48e/Convert3
xlsub2_reinterp_b_im_out1 = xSignal;
xlsub2_Convert3_out1 = xSignal;
xlsub2_Convert3 = xBlock(struct('source', 'Convert', 'name', 'Convert3'), ...
                         struct('n_bits', 18, ...
                                'bin_pt', 0, ...
                                'pipeline', 'on'), ...
                         {xlsub2_reinterp_b_im_out1}, ...
                         {xlsub2_Convert3_out1});

% block: DSP48CMULT/cmult_dsp48e/Convert4
xlsub2_reinterp_b_re_out1 = xSignal;
xlsub2_Convert4_out1 = xSignal;
xlsub2_Convert4 = xBlock(struct('source', 'Convert', 'name', 'Convert4'), ...
                         struct('n_bits', 18, ...
                                'bin_pt', 0, ...
                                'pipeline', 'on'), ...
                         {xlsub2_reinterp_b_re_out1}, ...
                         {xlsub2_Convert4_out1});

% block: DSP48CMULT/cmult_dsp48e/Convert5
xlsub2_Convert5_out1 = xSignal;
xlsub2_Convert5 = xBlock(struct('source', 'Convert', 'name', 'Convert5'), ...
                         struct('n_bits', 30, ...
                                'bin_pt', 0, ...
                                'pipeline', 'on'), ...
                         {xlsub2_reinterp_a_re_out1}, ...
                         {xlsub2_Convert5_out1});

% block: DSP48CMULT/cmult_dsp48e/Convert6
xlsub2_Convert6_out1 = xSignal;
xlsub2_Convert6 = xBlock(struct('source', 'Convert', 'name', 'Convert6'), ...
                         struct('n_bits', 18, ...
                                'bin_pt', 0, ...
                                'pipeline', 'on'), ...
                         {xlsub2_reinterp_b_re_out1}, ...
                         {xlsub2_Convert6_out1});

% block: DSP48CMULT/cmult_dsp48e/Convert7
xlsub2_Convert7_out1 = xSignal;
xlsub2_Convert7 = xBlock(struct('source', 'Convert', 'name', 'Convert7'), ...
                         struct('n_bits', 18, ...
                                'bin_pt', 0, ...
                                'pipeline', 'on'), ...
                         {xlsub2_reinterp_b_im_out1}, ...
                         {xlsub2_Convert7_out1});

% block: DSP48CMULT/cmult_dsp48e/DSP48E_0
xlsub2_opmode0_out1 = xSignal;
xlsub2_alumode0_out1 = xSignal;
xlsub2_carryin0_out1 = xSignal;
xlsub2_carryinsel0_out1 = xSignal;
xlsub2_DSP48E_0_out1 = xSignal;
xlsub2_DSP48E_0_out2 = xSignal;
xlsub2_DSP48E_0 = xBlock(struct('source', 'DSP48E', 'name', 'DSP48E_0'), ...
                         struct('use_pcout', 'on'), ...
                         {xlsub2_Convert5_out1, xlsub2_Convert7_out1, xlsub2_opmode0_out1, xlsub2_alumode0_out1, xlsub2_carryin0_out1, xlsub2_carryinsel0_out1}, ...
                         {xlsub2_DSP48E_0_out1, xlsub2_DSP48E_0_out2});

% block: DSP48CMULT/cmult_dsp48e/DSP48E_1
xlsub2_opmode1_out1 = xSignal;
xlsub2_alumode1_out1 = xSignal;
xlsub2_carryin1_out1 = xSignal;
xlsub2_carryinsel1_out1 = xSignal;
xlsub2_DSP48E_1_out1 = xSignal;
xlsub2_DSP48E_1 = xBlock(struct('source', 'DSP48E', 'name', 'DSP48E_1'), ...
                         struct('use_pcin', 'on', ...
                                'pipeline_a', '2', ...
                                'pipeline_b', '2'), ...
                         {xlsub2_Convert1_out1, xlsub2_Convert6_out1, xlsub2_DSP48E_0_out2, xlsub2_opmode1_out1, xlsub2_alumode1_out1, xlsub2_carryin1_out1, xlsub2_carryinsel1_out1}, ...
                         {xlsub2_DSP48E_1_out1});

% block: DSP48CMULT/cmult_dsp48e/DSP48E_2
xlsub2_opmode2_out1 = xSignal;
xlsub2_alumode2_out1 = xSignal;
xlsub2_carryin2_out1 = xSignal;
xlsub2_carryinsel2_out1 = xSignal;
xlsub2_DSP48E_2_out1 = xSignal;
xlsub2_DSP48E_2_out2 = xSignal;
xlsub2_DSP48E_2 = xBlock(struct('source', 'DSP48E', 'name', 'DSP48E_2'), ...
                         struct('use_pcout', 'on'), ...
                         {xlsub2_Convert2_out1, xlsub2_Convert4_out1, xlsub2_opmode2_out1, xlsub2_alumode2_out1, xlsub2_carryin2_out1, xlsub2_carryinsel2_out1}, ...
                         {xlsub2_DSP48E_2_out1, xlsub2_DSP48E_2_out2});

% block: DSP48CMULT/cmult_dsp48e/DSP48E_3
xlsub2_opmode3_out1 = xSignal;
xlsub2_alumode3_out1 = xSignal;
xlsub2_carryin3_out1 = xSignal;
xlsub2_carryinsel3_out1 = xSignal;
xlsub2_DSP48E_3_out1 = xSignal;
xlsub2_DSP48E_3 = xBlock(struct('source', 'DSP48E', 'name', 'DSP48E_3'), ...
                         struct('use_pcin', 'on', ...
                                'pipeline_a', '2', ...
                                'pipeline_b', '2'), ...
                         {xlsub2_Convert_out1, xlsub2_Convert3_out1, xlsub2_DSP48E_2_out2, xlsub2_opmode3_out1, xlsub2_alumode3_out1, xlsub2_carryin3_out1, xlsub2_carryinsel3_out1}, ...
                         {xlsub2_DSP48E_3_out1});

% block: DSP48CMULT/cmult_dsp48e/Terminator
xlsub2_terminator = xBlock(struct('source', 'terminator','name','Terminator'), ...
                            [], ...
                            {xlsub2_DSP48E_0_out1}, ...
                            {});

% block: DSP48CMULT/cmult_dsp48e/Terminator2
xlsub2_terminator2 = xBlock(struct('source', 'terminator','name','Terminator2'), ...
                            [], ...
                            {xlsub2_DSP48E_2_out1}, ...
                            {}); 

                        
% conjugation option
if strcmp(conjugated, 'on'),
    alumode1_const = 1;
    carryin1_const = 1;
    alumode3_const = 0;
else
    alumode1_const = 0;
    carryin1_const = 0;
    alumode3_const = 3;
end


% block: DSP48CMULT/cmult_dsp48e/alumode0
xlsub2_alumode0 = xBlock(struct('source', 'Constant', 'name', 'alumode0'), ...
                         struct('arith_type', 'Unsigned', ...
                                'const', 0, ...
                                'n_bits', 4, ...
                                'bin_pt', 0), ...
                         {}, ...
                         {xlsub2_alumode0_out1});

% block: DSP48CMULT/cmult_dsp48e/alumode1
xlsub2_alumode1 = xBlock(struct('source', 'Constant', 'name', 'alumode1'), ...
                         struct('arith_type', 'Unsigned', ...
				'const', alumode1_const, ...
                                'n_bits', 4, ...
                                'bin_pt', 0), ...
                         {}, ...
                         {xlsub2_alumode1_out1});

% block: DSP48CMULT/cmult_dsp48e/alumode2
xlsub2_alumode2 = xBlock(struct('source', 'Constant', 'name', 'alumode2'), ...
                         struct('arith_type', 'Unsigned', ...
                                'const', 0, ...
                                'n_bits', 4, ...
                                'bin_pt', 0), ...
                         {}, ...
                         {xlsub2_alumode2_out1});

% block: DSP48CMULT/cmult_dsp48e/alumode3
xlsub2_alumode3 = xBlock(struct('source', 'Constant', 'name', 'alumode3'), ...
                         struct('arith_type', 'Unsigned', ...
                                'const', alumode3_const, ...
                                'n_bits', 4, ...
                                'bin_pt', 0), ...
                         {}, ...
                         {xlsub2_alumode3_out1});

% block: DSP48CMULT/cmult_dsp48e/carryin0
xlsub2_carryin0 = xBlock(struct('source', 'Constant', 'name', 'carryin0'), ...
                         struct('arith_type', 'Unsigned', ...
                                'const', 0, ...
                                'n_bits', 1, ...
                                'bin_pt', 0), ...
                         {}, ...
                         {xlsub2_carryin0_out1});

% block: DSP48CMULT/cmult_dsp48e/carryin1
xlsub2_carryin1 = xBlock(struct('source', 'Constant', 'name', 'carryin1'), ...
                         struct('arith_type', 'Unsigned', ...
                                'const', carryin1_const, ...
                                'n_bits', 1, ...
                                'bin_pt', 0), ...
                         {}, ...
                         {xlsub2_carryin1_out1});

% block: DSP48CMULT/cmult_dsp48e/carryin2
xlsub2_carryin2 = xBlock(struct('source', 'Constant', 'name', 'carryin2'), ...
                         struct('arith_type', 'Unsigned', ...
                                'const', 0, ...
                                'n_bits', 1, ...
                                'bin_pt', 0), ...
                         {}, ...
                         {xlsub2_carryin2_out1});

% block: DSP48CMULT/cmult_dsp48e/carryin3
xlsub2_carryin3 = xBlock(struct('source', 'Constant', 'name', 'carryin3'), ...
                         struct('arith_type', 'Unsigned', ...
                                'const', 0, ...
                                'n_bits', 1, ...
                                'bin_pt', 0), ...
                         {}, ...
                         {xlsub2_carryin3_out1});

% block: DSP48CMULT/cmult_dsp48e/carryinsel0
xlsub2_carryinsel0 = xBlock(struct('source', 'Constant', 'name', 'carryinsel0'), ...
                            struct('arith_type', 'Unsigned', ...
                                   'const', 0, ...
                                   'n_bits', 3, ...
                                   'bin_pt', 0), ...
                            {}, ...
                            {xlsub2_carryinsel0_out1});

% block: DSP48CMULT/cmult_dsp48e/carryinsel1
xlsub2_carryinsel1 = xBlock(struct('source', 'Constant', 'name', 'carryinsel1'), ...
                            struct('arith_type', 'Unsigned', ...
                                   'const', 0, ...
                                   'n_bits', 3, ...
                                   'bin_pt', 0), ...
                            {}, ...
                            {xlsub2_carryinsel1_out1});

% block: DSP48CMULT/cmult_dsp48e/carryinsel2
xlsub2_carryinsel2 = xBlock(struct('source', 'Constant', 'name', 'carryinsel2'), ...
                            struct('arith_type', 'Unsigned', ...
                                   'const', 0, ...
                                   'n_bits', 3, ...
                                   'bin_pt', 0), ...
                            {}, ...
                            {xlsub2_carryinsel2_out1});

% block: DSP48CMULT/cmult_dsp48e/carryinsel3
xlsub2_carryinsel3 = xBlock(struct('source', 'Constant', 'name', 'carryinsel3'), ...
                            struct('arith_type', 'Unsigned', ...
                                   'const', 0, ...
                                   'n_bits', 3, ...
                                   'bin_pt', 0), ...
                            {}, ...
                            {xlsub2_carryinsel3_out1});

% block: DSP48CMULT/cmult_dsp48e/cast_c_im
xlsub2_reinterp_c_im_out1 = xSignal;
xlsub2_cast_c_im = xBlock(struct('source', 'Convert', 'name', 'cast_c_im'), ...
                          struct('n_bits', 37, ...
                                 'bin_pt', bin_pt_b, ...
                                 'pipeline', 'on'), ...
                          {xlsub2_reinterp_c_im_out1}, ...
                          {xlsub2_c_im});

% block: DSP48CMULT/cmult_dsp48e/cast_c_re
xlsub2_reinterp_c_re_out1 = xSignal;
xlsub2_cast_c_re = xBlock(struct('source', 'Convert', 'name', 'cast_c_re'), ...
                          struct('n_bits', 37, ...
                                 'bin_pt', bin_pt_a, ...
                                 'pipeline', 'on'), ...
                          {xlsub2_reinterp_c_re_out1}, ...
                          {xlsub2_c_re});

% block: DSP48CMULT/cmult_dsp48e/opmode0
xlsub2_opmode0 = xBlock(struct('source', 'Constant', 'name', 'opmode0'), ...
                        struct('arith_type', 'Unsigned', ...
                               'const', 5, ...
                               'n_bits', 7, ...
                               'bin_pt', 0), ...
                        {}, ...
                        {xlsub2_opmode0_out1});

% block: DSP48CMULT/cmult_dsp48e/opmode1
xlsub2_opmode1 = xBlock(struct('source', 'Constant', 'name', 'opmode1'), ...
                        struct('arith_type', 'Unsigned', ...
                               'const', 21, ...
                               'n_bits', 7, ...
                               'bin_pt', 0), ...
                        {}, ...
                        {xlsub2_opmode1_out1});

% block: DSP48CMULT/cmult_dsp48e/opmode2
xlsub2_opmode2 = xBlock(struct('source', 'Constant', 'name', 'opmode2'), ...
                        struct('arith_type', 'Unsigned', ...
                               'const', 5, ...
                               'n_bits', 7, ...
                               'bin_pt', 0), ...
                        {}, ...
                        {xlsub2_opmode2_out1});

% block: DSP48CMULT/cmult_dsp48e/opmode3
xlsub2_opmode3 = xBlock(struct('source', 'Constant', 'name', 'opmode3'), ...
                        struct('arith_type', 'Unsigned', ...
                               'const', 21, ...
                               'n_bits', 7, ...
                               'bin_pt', 0), ...
                        {}, ...
                        {xlsub2_opmode3_out1});

% block: DSP48CMULT/cmult_dsp48e/realign_a_im
xlsub2_realign_a_im_out1 = xSignal;
xlsub2_realign_a_im = xBlock(struct('source', 'Convert', 'name', 'realign_a_im'), ...
                             struct('n_bits', 18, ...
                                    'bin_pt', bin_pt_a, ...
                                    'pipeline', 'on'), ...
                             {xlsub2_a_im}, ...
                             {xlsub2_realign_a_im_out1});

% block: DSP48CMULT/cmult_dsp48e/realign_a_re
xlsub2_realign_a_re_out1 = xSignal;
xlsub2_realign_a_re = xBlock(struct('source', 'Convert', 'name', 'realign_a_re'), ...
                             struct('n_bits', 18, ...
                                    'bin_pt', bin_pt_a, ...
                                    'pipeline', 'on'), ...
                             {xlsub2_a_re}, ...
                             {xlsub2_realign_a_re_out1});

% block: DSP48CMULT/cmult_dsp48e/realign_b_im
xlsub2_realign_b_im_out1 = xSignal;
xlsub2_realign_b_im = xBlock(struct('source', 'Convert', 'name', 'realign_b_im'), ...
                             struct('n_bits', 18, ...
                                    'bin_pt', bin_pt_b, ...
                                    'pipeline', 'on'), ...
                             {xlsub2_b_im}, ...
                             {xlsub2_realign_b_im_out1});

% block: DSP48CMULT/cmult_dsp48e/realign_b_re
xlsub2_realign_b_re_out1 = xSignal;
xlsub2_realign_b_re = xBlock(struct('source', 'Convert', 'name', 'realign_b_re'), ...
                             struct('n_bits', 18, ...
                                    'bin_pt', bin_pt_b, ...
                                    'pipeline', 'on'), ...
                             {xlsub2_b_re}, ...
                             {xlsub2_realign_b_re_out1});

% block: DSP48CMULT/cmult_dsp48e/reinterp_a_im
xlsub2_reinterp_a_im = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_a_im'), ...
                              struct('force_arith_type', 'on', ...
                                     'arith_type', 'Signed  (2''s comp)', ...
                                     'force_bin_pt', 'on'), ...
                              {xlsub2_realign_a_im_out1}, ...
                              {xlsub2_reinterp_a_im_out1});

% block: DSP48CMULT/cmult_dsp48e/reinterp_a_re
xlsub2_reinterp_a_re = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_a_re'), ...
                              struct('force_arith_type', 'on', ...
                                     'arith_type', 'Signed  (2''s comp)', ...
                                     'force_bin_pt', 'on'), ...
                              {xlsub2_realign_a_re_out1}, ...
                              {xlsub2_reinterp_a_re_out1});

% block: DSP48CMULT/cmult_dsp48e/reinterp_b_im
xlsub2_reinterp_b_im = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_b_im'), ...
                              struct('force_arith_type', 'on', ...
                                     'arith_type', 'Signed  (2''s comp)', ...
                                     'force_bin_pt', 'on', ...
                                     'bin_pt', bin_pt_b), ...
                              {xlsub2_realign_b_im_out1}, ...
                              {xlsub2_reinterp_b_im_out1});

% block: DSP48CMULT/cmult_dsp48e/reinterp_b_re
xlsub2_reinterp_b_re = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_b_re'), ...
                              struct('force_arith_type', 'on', ...
                                     'arith_type', 'Signed  (2''s comp)', ...
                                     'force_bin_pt', 'on', ...
                                     'bin_pt', bin_pt_a), ...
                              {xlsub2_realign_b_re_out1}, ...
                              {xlsub2_reinterp_b_re_out1});

% block: DSP48CMULT/cmult_dsp48e/reinterp_c_im
xlsub2_reinterp_c_im = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_c_im'), ...
                              struct('force_arith_type', 'on', ...
                                     'arith_type', 'Signed  (2''s comp)', ...
                                     'force_bin_pt', 'on', ...
                                     'bin_pt', bin_pt_b), ...
                              {xlsub2_DSP48E_1_out1}, ...
                              {xlsub2_reinterp_c_im_out1});

% block: DSP48CMULT/cmult_dsp48e/reinterp_c_re
xlsub2_reinterp_c_re = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_c_re'), ...
                              struct('force_arith_type', 'on', ...
                                     'arith_type', 'Signed  (2''s comp)', ...
                                     'force_bin_pt', 'on', ...
                                     'bin_pt', bin_pt_a), ...
                              {xlsub2_DSP48E_3_out1}, ...
                              {xlsub2_reinterp_c_re_out1});

                          
end

