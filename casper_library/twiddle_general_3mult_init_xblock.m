function twiddle_general_3mult_init_xblock(Coeffs, StepPeriod, coeffs_bram, coeff_bit_width, input_bit_width, add_latency, mult_latency, bram_latency, conv_latency, arch, use_hdl, use_embedded, quantization, overflow)


%% inports
xlsub2_a = xInport('a');
xlsub2_b = xInport('b');
xlsub2_sync = xInport('sync');

%% outports
xlsub2_a_re = xOutport('a_re');
xlsub2_a_im = xOutport('a_im');
xlsub2_bw_re = xOutport('bw_re');
xlsub2_bw_im = xOutport('bw_im');
xlsub2_sync_out = xOutport('sync_out');

%% diagram



% block: twiddles_collections/twiddle_general_3mult/AddSub1
xlsub2_c_to_ri3_out1 = xSignal;
xlsub2_c_to_ri3_out2 = xSignal;
xlsub2_AddSub1_out1 = xSignal;
xlsub2_AddSub1 = xBlock(struct('source', 'AddSub', 'name', 'AddSub1'), ...
                        struct('latency', add_latency, ...
                               'use_behavioral_HDL', 'on'), ...
                        {xlsub2_c_to_ri3_out1, xlsub2_c_to_ri3_out2}, ...
                        {xlsub2_AddSub1_out1});

% block: twiddles_collections/twiddle_general_3mult/AddSub2
xlsub2_c_to_ri2_out1 = xSignal;
xlsub2_c_to_ri2_out2 = xSignal;
xlsub2_AddSub2_out1 = xSignal;
xlsub2_AddSub2 = xBlock(struct('source', 'AddSub', 'name', 'AddSub2'), ...
                        struct('latency', add_latency, ...
                               'use_behavioral_HDL', 'on'), ...
                        {xlsub2_c_to_ri2_out1, xlsub2_c_to_ri2_out2}, ...
                        {xlsub2_AddSub2_out1});

% block: twiddles_collections/twiddle_general_3mult/AddSub3
xlsub2_AddSub3_out1 = xSignal;
xlsub2_AddSub3 = xBlock(struct('source', 'AddSub', 'name', 'AddSub3'), ...
                        struct('mode', 'Subtraction', ...
                               'latency', add_latency, ...
                               'use_behavioral_HDL', 'on'), ...
                        {xlsub2_c_to_ri2_out2, xlsub2_c_to_ri2_out1}, ...
                        {xlsub2_AddSub3_out1});



% block: twiddles_collections/twiddle_general_3mult/c_to_ri1
xlsub2_delay0_out1 = xSignal;
xlsub2_c_to_ri1 = xBlock(struct('source', str2func('c_to_ri_xblock'), 'name', 'c_to_ri1'), ...
                         {coeff_bit_width, ...
                            coeff_bit_width-1}, ...
                         {xlsub2_delay0_out1}, ...
                         {xlsub2_a_re, xlsub2_a_im});

% block: twiddles_collections/twiddle_general_3mult/c_to_ri2
xlsub2_coeff_gen_out1 = xSignal;
xlsub2_c_to_ri2 = xBlock(struct('source', str2func('c_to_ri_xblock'), 'name', 'c_to_ri2'), ...
                          {coeff_bit_width, ...
                            coeff_bit_width-1}, ...
                         {xlsub2_coeff_gen_out1}, ...
                         {xlsub2_c_to_ri2_out1, xlsub2_c_to_ri2_out2});

% block: twiddles_collections/twiddle_general_3mult/c_to_ri3
xlsub2_delay1_out1 = xSignal;
xlsub2_c_to_ri3 = xBlock(struct('source', str2func('c_to_ri_xblock'), 'name', 'c_to_ri3'), ...
                         {coeff_bit_width, ...
                            coeff_bit_width-1}, ...
                         {xlsub2_delay1_out1}, ...
                         {xlsub2_c_to_ri3_out1, xlsub2_c_to_ri3_out2});


% block: twiddles_collections/twiddle_general_3mult/delay0
xlsub2_delay0 = xBlock(struct('source', 'Delay', 'name', 'delay0'), ...
                       struct('latency', mult_latency + 2*add_latency + bram_latency + conv_latency), ...
                       {xlsub2_a}, ...
                       {xlsub2_delay0_out1});

% block: twiddles_collections/twiddle_general_3mult/delay1
xlsub2_delay1 = xBlock(struct('source', 'Delay', 'name', 'delay1'), ...
                       struct('latency', bram_latency), ...
                       {xlsub2_b}, ...
                       {xlsub2_delay1_out1});

% block: twiddles_collections/twiddle_general_3mult/delay2
xlsub2_delay2 = xBlock(struct('source', 'Delay', 'name', 'delay2'), ...
                       struct('latency', mult_latency + 2*add_latency + bram_latency + conv_latency), ...
                       {xlsub2_sync}, ...
                       {xlsub2_sync_out});

% block: twiddles_collections/twiddle_general_3mult/delay3
xlsub2_delay3_out1 = xSignal;
xlsub2_delay3 = xBlock(struct('source', 'Delay', 'name', 'delay3'), ...
                       struct('latency', add_latency, ...
                              'reg_retiming', 'on'), ...
                       {xlsub2_c_to_ri3_out1}, ...
                       {xlsub2_delay3_out1});

% block: twiddles_collections/twiddle_general_3mult/delay4
xlsub2_delay4_out1 = xSignal;
xlsub2_delay4 = xBlock(struct('source', 'Delay', 'name', 'delay4'), ...
                       struct('latency', add_latency, ...
                              'reg_retiming', 'on'), ...
                       {xlsub2_c_to_ri3_out2}, ...
                       {xlsub2_delay4_out1});

% block: twiddles_collections/twiddle_general_3mult/delay5
xlsub2_delay5_out1 = xSignal;
xlsub2_delay5 = xBlock(struct('source', 'Delay', 'name', 'delay5'), ...
                       struct('latency', add_latency, ...
                              'reg_retiming', 'on'), ...
                       {xlsub2_c_to_ri2_out1}, ...
                       {xlsub2_delay5_out1});

% block: twiddles_collections/twiddle_general_3mult/mult0
xlsub2_mult0_out1 = xSignal;
xlsub2_mult0 = xBlock(struct('source', 'Mult', 'name', 'mult0'), ...
                      struct('latency', mult_latency, ...
                             'use_behavioral_HDL', use_hdl, ...
                             'use_embedded', use_embedded), ...
                      {xlsub2_AddSub1_out1, xlsub2_delay5_out1}, ...
                      {xlsub2_mult0_out1});

% block: twiddles_collections/twiddle_general_3mult/mult1
xlsub2_mult1_out1 = xSignal;
xlsub2_mult1 = xBlock(struct('source', 'Mult', 'name', 'mult1'), ...
                      struct('latency', mult_latency, ...
                             'use_behavioral_HDL', use_hdl, ...
                             'use_embedded', use_embedded), ...
                      {xlsub2_delay4_out1, xlsub2_AddSub2_out1}, ...
                      {xlsub2_mult1_out1});

% block: twiddles_collections/twiddle_general_3mult/mult2
xlsub2_mult2_out1 = xSignal;
xlsub2_mult2 = xBlock(struct('source', 'Mult', 'name', 'mult2'), ...
                      struct('latency', mult_latency, ...
                             'use_behavioral_HDL', use_hdl, ...
                             'use_embedded', use_embedded), ...
                      {xlsub2_delay3_out1, xlsub2_AddSub3_out1}, ...
                      {xlsub2_mult2_out1});

%architecture specific logic
if( strcmp(arch,'Virtex2Pro') ),

    %add convert blocks to reduce logic in adders
    % % block: twiddles_collections/twiddle_general_3mult/convert2
    xlsub2_convert2_out1 = xSignal;
    xlsub2_convert2 = xBlock(struct('source', 'Convert', 'name', 'convert2'), ...
                             struct('n_bits', input_bit_width+5, ...
                                    'bin_pt', input_bit_width+1, ...
                                    'quantization', tostring(quantization), ...
                                    'overflow',tostring(overflow), ...
                                    'latency', conv_latency, ...
                                    'pipeline', 'on'), ...
                             {xlsub2_mult0_out1}, ...
                             {xlsub2_convert2_out1});
                         
    %add convert blocks to reduce logic in adders
    % % block: twiddles_collections/twiddle_general_3mult/convert3
    xlsub2_convert3_out1 = xSignal;
    xlsub2_convert3 = xBlock(struct('source', 'Convert', 'name', 'convert3'), ...
                             struct('n_bits', input_bit_width+5, ...
                                    'bin_pt', input_bit_width+1, ...
                                    'quantization', tostring(quantization), ...
                                    'overflow',tostring(overflow), ...
                                    'pipeline', 'on'), ...
                             {xlsub2_mult1_out1}, ...
                             {xlsub2_convert3_out1});
                         
    %add convert blocks to reduce logic in adders
    % % block: twiddles_collections/twiddle_general_3mult/convert4
    xlsub2_convert4_out1 = xSignal;
    xlsub2_convert4 = xBlock(struct('source', 'Convert', 'name', 'convert4'), ...
                             struct('n_bits', input_bit_width+5, ...
                                    'bin_pt', input_bit_width+1, ...
                                    'quantization', tostring(quantization), ...
                                    'overflow',tostring(overflow), ...
                                    'pipeline', 'on'), ...
                             {xlsub2_mult2_out1}, ...
                             {xlsub2_convert4_out1});
    % block: twiddles_collections/twiddle_general_3mult/AddSub
    xlsub2_AddSub_out1 = xSignal;
    xlsub2_AddSub = xBlock(struct('source', 'AddSub', 'name', 'AddSub'), ...
                           struct('mode', 'Subtraction', ...
                                  'latency', add_latency, ...
                                  'use_behavioral_HDL', 'on'), ...
                           {xlsub2_convert2_out1, xlsub2_convert3_out1}, ...
                           {xlsub2_bw_re});

                       
    % block: twiddles_collections/twiddle_general_3mult/AddSub4
    xlsub2_AddSub4_out1 = xSignal;
    xlsub2_AddSub4 = xBlock(struct('source', 'AddSub', 'name', 'AddSub4'), ...
                            struct('latency', add_latency, ...
                                   'use_behavioral_HDL', 'on'), ...
                            {xlsub2_convert2_out1, xlsub2_convert4_out1}, ...
                            {xlsub2_bw_im});
                        
                        
elseif( strcmp(arch,'Virtex5') )
    % block: twiddles_collections/twiddle_general_3mult/AddSub
    xlsub2_AddSub_out1 = xSignal;
    xlsub2_AddSub = xBlock(struct('source', 'AddSub', 'name', 'AddSub'), ...
                           struct('mode', 'Subtraction', ...
                                  'latency', add_latency, ...
                                  'use_behavioral_HDL', 'on'), ...
                           {xlsub2_mult0_out1, xlsub2_mult1_out1}, ...
                           {xlsub2_AddSub_out1});

                       
    % block: twiddles_collections/twiddle_general_3mult/AddSub4
    xlsub2_AddSub4_out1 = xSignal;
    xlsub2_AddSub4 = xBlock(struct('source', 'AddSub', 'name', 'AddSub4'), ...
                            struct('latency', add_latency, ...
                                   'use_behavioral_HDL', 'on'), ...
                            {xlsub2_mult0_out1, xlsub2_mult2_out1}, ...
                            {xlsub2_AddSub4_out1});
                        
                        
    %add convert blocks to after adders to ensure adders absorbed into multipliers
    xlsub2_convert2_out1 = xSignal;
    xlsub2_convert2 = xBlock(struct('source', 'Convert', 'name', 'convert2'), ...
                             struct('n_bits', input_bit_width+5, ...
                                    'bin_pt', input_bit_width+1, ...
                                    'quantization', tostring(quantization), ...
                                    'overflow',tostring(overflow), ...
                                    'pipeline', 'on'), ...
                             {xlsub2_AddSub_out1}, ...
                             {xlsub2_bw_re});

    % block: twiddles_collections/twiddle_general_3mult/convert3xlsub2_convert2_out1 = xSignal;
    xlsub2_convert3_out1 = xSignal;
    xlsub2_convert3 = xBlock(struct('source', 'Convert', 'name', 'convert3'), ...
                             struct('n_bits', input_bit_width+5, ...
                                    'bin_pt', input_bit_width+1, ...
                                    'quantization', tostring(quantization), ...
                                    'overflow',tostring(overflow), ...
                                    'pipeline', 'on'), ...
                             {xlsub2_AddSub4_out1}, ...
                             {xlsub2_bw_im});
end

% block: twiddles_collections/twiddle_general_3mult/coeff_gen
xlsub2_coeff_gen_sub = xBlock(struct('source', str2func('coeff_gen_init_xblock'), 'name', 'coeff_gen'), ...
                          {Coeffs, coeff_bit_width, StepPeriod, bram_latency, coeffs_bram}, ...
                          {xlsub2_sync}, ...
                          {xlsub2_coeff_gen_out1});





end

